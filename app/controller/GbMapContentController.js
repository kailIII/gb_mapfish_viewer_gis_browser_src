/*
 * File: app/controller/GbMapContentController.js
 *
 * This file was generated by Sencha Architect version 2.0.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Gb41.controller.GbMapContentController', {
	extend: 'Ext.app.Controller',

	requires: [
		'Gb41.model.WmsLayer',
		'GeoExt.slider.LayerOpacity',
		'GeoExt.slider.Tip'
	],

	models: [
		'WmsLayer'
	],
	stores: [
		'WmsLayers'
	],
	views: [
		'GbMapContent',
		'GbLegendPanel',
		'GbTocPanel',
		'GbInfoTabPanel'
	],
	refs: [
		{
			ref: 'GbInfoTabPanel',
			selector: 'gbinfotabpanel'
		},
		{
			ref: 'gbLegendPanel',
			selector: 'gblegendpanel'
		},
		{
			ref: 'gbTocPanel',
			selector: 'gbtocpanel'
		},
		{
			ref: 'myMapPanel',
			selector: 'viewport > gbmaptabpanel > gbmappanel'
		}
	],

	init: function () {
		this.control({
			'gbtocpanel': {
				checkchange: this.onCheckChange
			}
		});

		GbZh.base.ViewerState.on({
			topicready: {
				fn: this.onTopicReady,
				scope: this
			},
			addlayer: {
				fn: this.onAddLayer,
				scope: this
			},
			removelayer: {
				fn: this.onRemoveLayer,
				scope: this
			},
			modeactivate: {
				fn: this.onModeActivate,
				scope: this
			},
			scalechanged: {
				fn: this.activateLayersFromScale,
				scope: this
			},
			removetocnode: {
				fn: this.onRemoveTocNode,
				scope: this
			},
			multiplecheckchange: {
				fn: this.onMultipleCheckChange,
				scope: this
			},
			circlestatisticsradius: {
				fn: this.onCircleStatisticsRadius,
				scope: this
			},
			showstabevmap: {
				fn: this.onShowStaBevMap,
				scope: this
			}

		});
	},

	onLaunch: function () {
		//LOG console.log('GbMapContentController launch');
//INFO: ohne dieses Expand ist der Tree noch nicht so richtig ready!
// Bug: http://www.sencha.com/forum/showthread.php?202939
//		this.getGbTocPanel().store = store;
		this.getGbTocPanel().expand();
	},

	onCircleStatisticsRadius: function (radius, x, y) {
		radius = parseInt(radius);
		if (radius < 80) {
			radius = 80;
		}
		GbZh.base.ViewerState.csradius = radius;
		this.getMyMapPanel().map.getControlsBy('displayClass',"olControlFeatureQuery")[0].request(new OpenLayers.Bounds(x, y, x, y));
	},

	onRemoveTocNode: function (topicName, level) {
		//LOG console.log('onRemoveTocNode: ' + topicName);
//HACK 
		if (level === 'Selection') {
			level = 'tool';
		}
//ENDHACK
		var me = this.getGbTocPanel();
		var root = me.store.getRootNode();
		var node = root.findChildBy(function (n) {
			if (n.raw.level === level) {
				return true;
			}
		});
		//if (level === 'over') {
		var oldNode = node.findChildBy(function (n) {
			if (n.data.niveau === 0 && n.data.topic === topicName) {
				return true;
			}
		});
		if (oldNode) {
			oldNode.remove(false);
		}
		//}
	},

	onTopicReady: function (topic, topictitle, level, persistOverlay) {
		var topicStore = this.getStore('Topics');
		var oldFilter = topicStore.filters.clone();
		topicStore.clearFilter(true);
		var ix = topicStore.findExact('name', topic);
		var rec = topicStore.getAt(ix);
		topicStore.filters = oldFilter;
		topicStore.filter();
		var olclass = rec.data.ollayer_class;
		this.buildTocTree(topic, topictitle, level, persistOverlay, olclass, this);
		if (level === 'main') {
			this.showLegendInfo(topic, rec.get('geoliongdd'), this);
		}
	},

	onAddLayer: function (e) {
		if (!e.layer.displayInLayerSwitcher) {
			return;
		}

		if (e.layer.gbLayerLevel === 'main' ||
					e.layer.gbLayerLevel === 'over' ||
					e.layer.gbLayerLevel === 'back') {
			return;
		}

		if (e.layer.name === 'Selection') {
			var me = this.getGbTocPanel();
			var root = me.store.getRootNode();
			var node = root.findChildBy(function (n) {
				if (n.raw.toclayertitle === e.layer.gbLayerTitle) {
					return true;
				}
			}, this, true);
			if (node) {
				return;
			}
		}

		var layer = e.layer;
		var topic, topictitle, level, persistOverlay, olclass, that;
		topic = layer.name;
		if (layer.gbLayerTitle) {
			topictitle = layer.gbLayerTitle;
		} else {
			topictitle = layer.name;
		}
		persistOverlay = layer.gbPersistOverlay;
		olclass = 'tool';
		level = 'tool';
		that = this;
		this.buildTocTree(topic, topictitle, level, persistOverlay, olclass, that);
	},

	onRemoveLayer: function (e) {
		if (e.layer.isEditLayer) {
			// remove edit layer from TOC
			GbZh.base.ViewerState.fireEvent('removetocnode', e.layer.name, 'tool');
		}
	},

	buildTocTree: function (topic, topictitle, level, persistOverlay, olclass, that) {
		//LOG console.log("buildTocTree: " + topictitle + " (" + level + ")");
		var i, len, node, root,
			me = that.getGbTocPanel();
		root = me.store.getRootNode();
		node = root.findChildBy(function (n) {
			if (n.raw.level === level) {
				return true;
			}
		});
		if (level === 'main') {
			node.removeAll(false);
		} else if (level === 'back') {
			node.removeAll(false);
		} else if (level === 'over') {
			var oldNode = node.findChildBy(function (n) {
				if (n.data.niveau === 0 && n.data.topic === topic) {
					return true;
				}
			});
			if (oldNode) {
				oldNode.remove(false);
			}
		}
		var newNode;
//TODO: künftig 'wmszh' statt 'wms' => löschen
		if (olclass === 'WMS') {
			olclass = 'wmszh';
		}

		if (olclass === 'wmszh') {
			newNode = {
				toclayertitle: topictitle,
				id: topic,
				leaf: false,
				niveau: 0,
				checked: true,
				cls: 'topicnode',
				topic: topic
			};
			if (level === 'main') {
				Ext.apply(newNode, { expanded: true});
			}
		} else {
			newNode = {
				toclayertitle: topictitle,
				id: topic,
				leaf: true,
				niveau: 0,
				expanded: true,
				checked: true,
				minscale: '',
				maxscale: '',
				topic: topic
			};
			newNode.qtip = '<b>' + topictitle + '</b>,<br>(kein WMSZH)';
		}

		if (node.childNodes.length === 0) {
			node = node.appendChild(newNode);
		} else {
			node = node.insertBefore(newNode, node.firstChild);
		}

//TODO: künftig 'wmszh' statt 'wms' 
		if (olclass === 'wmszh') {
			var wms = this.getStore('WmsLayers');
			wms.clearFilter(true);
			wms.filterBy(function (r) {
				return r.data.topic  === topic;
			}, this);

			wms.sort([{
				property: 'toc_sort',
				direction: 'DESC'
			}]);

			var groupold = '';
			var niveau = 0;
			var start = 0;
			wms.each(function (r) {
				if (r.data.groupname !== groupold) {
					if (niveau > 0) {
						node = node.parentNode;
						niveau = niveau - 1;
					}
					if (r.data.groupname !== null) {
						node = node.appendChild({
							toclayertitle: r.data.groupname,
							id: r.data.groupname,
							leaf: false,
							expanded: true,
							niveau: niveau,
							checked: r.data.visini,
							topic: r.data.topic
						});
						niveau = niveau + 1;
					}
					groupold = r.data.groupname;
				}
				var n = {
					toclayertitle: r.data.toclayertitle,
					id: r.data.id,
					leaf: true,
					niveau: niveau,
					checked: r.data.visini,
					topic: r.data.topic,
					layername: r.data.layername,
					minscale: r.data.minscale,
					maxscale: r.data.maxscale
				};
				n.qtip = '<b>' + r.data.toclayertitle + '</b>,<br>sichtbar in den Massstäben<br>1:'
					+ r.data.minscale + " bis 1:" + r.data.maxscale
					+ '<br>(Layername: \'' + r.data.layername + '\')';
				node.appendChild(n);
			}, {
				layerTreeGrid: this
			});
			wms.clearFilter(true);
		}
		var scale = this.getMyMapPanel().map.getScale();
		this.activateLayersFromScale(scale);

        this.getGbTocPanel().on('afterlayout', this.addOpacitySliders, this);

		this.getGbTocPanel().doComponentLayout();

	},

	activateLayersFromScale: function (scale) {
		this.getGbTocPanel().store.getRootNode().cascadeBy(function (node) {
			if (node.data.leaf) {
				if ((scale >= node.data.minscale) && (scale <= node.data.maxscale)) {
					node.data.cls = 'x-item-enabled';
				} else {
//					node.data.cls = 'x-item-disabled';
					node.data.cls = 'notinscale';
				}
//			} else {
//				node.data.cls = 'x-item-enabled';
			}
		});
//TODO funktioniert noch nicht (?)
		this.getGbTocPanel().view.refresh();
	},

    addOpacitySliders: function (panel, layout, eOpts) {
        var map = this.getMyMapPanel().map;
        var els = Ext.select(".addopacityslider");
        els.each(function (el) {
            el.removeCls("addopacityslider");
            var layername = el.getAttribute('data-topic');
            var id = 'opacityslider_' + layername;
            el.set({'id': id});

            var slider = Ext.create('GeoExt.slider.LayerOpacity', {
                layer: map.getLayersByName(layername)[0],
                width: 80,
                inverse: false,
                aggressive: true,
                renderTo: id,
                plugins: Ext.create("GeoExt.slider.Tip", {
                    getText: function (thumb) {
                        return Ext.String.format('Transparenz: {0}%', 100.0 - thumb.value);
                    }
                })
            });
        });
    },

	showLegendInfo: function (topic, geoliongdd, that) {
		Ext.Ajax.request({
			url: '/topics/' + topic + '/legend',
			success: function (response, opts) {
				GbZh.base.ViewerState.fireEvent('insertservicemetadata', geoliongdd);
				var legHtml = '<div id="legtxt">';

//INFO: hätten wir Metadaten auf Topic-Niveau, müsste man da was machen
/*				var gdpnr = GbZh.store.Topics.getMetaForTopic(topic);
				if (gdpnr) {
					legHtml += '<a href="#" onclick="GbZh.base.ViewerState.fireEvent(\'showmetadata\', \'P\', \'' + gdpnr + '\', \'0\')">';
					legHtml += '<img src="/img/info.png" alt="Metadaten"></a>';
				}
					
*/
//				legHtml += '<span class="noPrint"><a href="#" onclick="GbZh.base.ViewerState.fireEvent(\'printLegend\')">';
				legHtml += '<span class="noPrint"><a href="javascript:void(0)" onclick="GbZh.base.ViewerState.fireEvent(\'printLegend\')">';
				legHtml += '<img src="/img/print.png" alt="Legende Drucken"></a></span>&nbsp;&nbsp;&nbsp;';
				legHtml += '<span id="serviceinfo" style="float:right; font-size:10px"></span><div id="servicedetails" style="display: none; text-align:right"></div>';

				legHtml += response.responseText;
				legHtml += '</div>';
				var me = that.getGbLegendPanel();
				me.update(legHtml);
				me.expand();

				if (Ext.getElementById('selmap')) {
					var wms = that.getStore('WmsLayers');
					wms.clearFilter(true);
					wms.filterBy(function (r) {
						return r.data.topic  === topic;
					}, this);
					var toSelect = '';
					if (that.checkLayerChecked(wms, 'synoptische-gefahrenkarte')) {
						toSelect = 'SG';
					} else if (that.checkLayerChecked(wms, 'intensitaetsflaechen-hochwasser-hq300')) {
						toSelect = 'IF300';
					} else if (that.checkLayerChecked(wms, 'intensitaetsflaechen-hochwasser-hq100')) {
						toSelect = 'IF100';
					} else if (that.checkLayerChecked(wms, 'intensitaetsflaechen-hochwasser-hq30')) {
						toSelect = 'IF30';
					} else if (that.checkLayerChecked(wms, 'wassertiefe-hq300')) {
						toSelect = 'WT300';
					} else if (that.checkLayerChecked(wms, 'wassertiefe-hq100')) {
						toSelect = 'WT100';
					} else if (that.checkLayerChecked(wms, 'wassertiefe-hq30')) {
						toSelect = 'WT30';
					} else if (that.checkLayerChecked(wms, 'intensitaetsflaechen-massenbewegungen-mb300')) {
						toSelect = 'MB300';
					} else if (that.checkLayerChecked(wms, 'intensitaetsflaechen-massenbewegungen-mb100')) {
						toSelect = 'MB100';
					} else if (that.checkLayerChecked(wms, 'intensitaetsflaechen-massenbewegungen-mb30')) {
						toSelect = 'MB30';
					} else if (that.checkLayerChecked(wms, 'permanente-rutschungen')) {
						toSelect = 'PR';
					}
					if (toSelect === '') {
						alert('toSelect not found.');
					}
					var radio = Ext.getElementById(toSelect);
					if (radio) {
						radio.checked = true;
					} else {
						alert('Radiobutton not found.');
					}
				}
				that.getGbInfoTabPanel().setActiveTab('MyGbMapContent');
			}
		});
	},


	checkLayerChecked: function (wms, layername) {
		var recnr = wms.findExact('layername', layername);
		if (recnr >= 0) {
//			console.log(recnr + " " + layername + " " + wms.getAt(recnr).data.visuser);
			return wms.getAt(recnr).data.visuser;
		}
//		console.log(recnr + " " + layername);
		return false;
	},

	onModeActivate: function (newMode) {
		switch (newMode) {
		case 'gbredlining':
			var redlininglayer = this.getGbTocPanel().store.getNodeById('tool').findChild('id', 'redlining');
			if (redlininglayer) {
				this.getGbTocPanel().store.getNodeById('redlining').data.checked = true;
				GbZh.base.ViewerState.fireEvent('topicvisibilitychanged', 'redlining', true);
			}
			break;
		case 'gbinfo':
			var markerlayer = this.getGbTocPanel().store.getNodeById('tool').findChild('id', 'Markers');
			if (markerlayer) {
				this.getGbTocPanel().store.getNodeById('Markers').data.checked = true;
				GbZh.base.ViewerState.fireEvent('topicvisibilitychanged', 'Markers', true);
			}
			break;
		default:
		}
	},

	doMultipleCheckChange: function (topic, level, which, how) {
		var i, len, rec;
		var wmsStore = this.getStore('WmsLayers');
		var root = this.getGbTocPanel().store.getRootNode();
		var levelNode = root.findChildBy(function (n) {
			if (n.raw.level === level) {
				return true;
			}
		});

		var funWms = function (r) {
				if (r.data.topic === topic && r.data.layername === which[i]) {
					return true;
				}
			};

		var funTree = function (n) {
				if (n.raw.id === rec.data.id) {
					return true;
				}
			};

		for (i = 0, len = which.length; i < len; i += 1) {
			var irec = wmsStore.findBy(funWms);
			rec = wmsStore.getAt(irec);
			if (rec) {
				rec.data.visuser = how;

				var node = root.findChildBy(funTree, this, true);
				if (node) {
					node.raw.checked = how;
					node.data.checked = how;
				}
			}
		}
	},

	onMultipleCheckChange: function (topic, level, toUnchecked, toChecked) {
		GbZh.base.ViewerState.requestState.offlayers = toUnchecked;
		GbZh.base.ViewerState.requestState.onlayers = toChecked;
		this.doMultipleCheckChange(topic, level, toUnchecked, false);
		this.doMultipleCheckChange(topic, level, toChecked, true);
		GbZh.base.ViewerState.fireEvent('wmslayersvisibilitychanged', topic);
		this.getGbTocPanel().view.refresh();
	},

	onCheckChange: function (node, checked, eOpts) {
		var i, len, topic;

		var wmsStore = this.getStore('WmsLayers');
		var rec;
		if (node.data.niveau < 0) {
			for (i = 0, len = node.childNodes.length; i < len; i += 1) {
				if (node.data.id === 'tool') {
					node.childNodes[i].data.checked = checked;
					GbZh.base.ViewerState.fireEvent('topicvisibilitychanged', node.childNodes[i].data.id, checked);
				} else {
					GbZh.base.ViewerState.fireEvent('topicvisibilitychanged', node.childNodes[i].data.topic, checked);
				}
			}
		} else {
			if (node.data.parentId === 'tool') {
				GbZh.base.ViewerState.fireEvent('topicvisibilitychanged', node.data.id, checked);
				return;
			}
			if (node.isLeaf()) {
				node.data.visuser = checked;
				rec = wmsStore.getById(node.data.id);
				rec.data.visuser = checked;
				topic = rec.data.topic;
			} else {
				node.cascadeBy(function (n) {
					n.data.checked = checked;
					if (n.isLeaf()) {
						n.data.visuser = checked;
						rec = wmsStore.getById(n.data.id);
						rec.data.visuser = checked;
						topic = rec.data.topic;
					}
				}, {
					checked: checked
				});

			}
			GbZh.base.ViewerState.fireEvent('wmslayersvisibilitychanged', topic);
		}
		this.getGbTocPanel().view.refresh();
	},

	//TODO: Diese Funktion gehört vielleicht nicht zum "Karteninhalt" => umplatzieren
	permalink: function () {
		var map = this.getMyMapPanel().map;
		var topic = GbZh.base.ViewerState.activeTopic;
		var wmsLayerController = this.getController('GbWmsLayerController');
		var wmsLayersList = wmsLayerController.getLayerList(topic);
		var params = {
			topic: GbZh.base.ViewerState.activeTopic,
			offlayers: wmsLayerController.getOffLayerList(topic),

			scale: Ext.util.Format.round(map.getScale(), 0),
			x: Ext.util.Format.round(map.getCenter().lon, 2),
			y: Ext.util.Format.round(map.getCenter().lat, 2)
		};
	//TODO: Background- und Overlay-Layer, ev. auch Markers

		var selection = GbZh.base.ViewerState.getCurrentState().selection;
		if (selection !== null) {
			params.seltopic = selection.seltopic;
			params.sellayer = selection.sellayer;
			params.selproperty = selection.selproperty;
			params.selvalues = selection.selvalues.join('$');
		}

                // Redlining
		if (GbZh.base.ViewerState.getCurrentState().redlining !== null
				&& GbZh.base.ViewerState.getCurrentState().redlining !== 'GEOMETRYCOLLECTION()') {
			params.redlining = GbZh.base.ViewerState.getCurrentState().redlining;
		}

	//HACK Startpunkt der Applikation
	//	return Ext.urlAppend(this.appUrl, Ext.urlEncode(params));
		return Ext.urlAppend(GbZh.base.ViewerState.serverUrl, Ext.urlEncode(params));
	},

	onShowStaBevMap: function (form) {
		var i;
		var karte = form.kartenwahl.options[form.kartenwahl.selectedIndex].value;
		var radio = form.darstellung;
		var typus = 'raster';
		for (i = 0; i < radio.length; i++) {
			if (radio[i].checked) {
				typus = radio[i].value;
			}
		}
		var sr2010 = ["p10m","p10d","p10z","p10c"];
		var sr2000 = ["p00d","p00z","p00c"];
		var sr1990 = ["p90d","p90z","p90c"];

		var sk2010 = ["pg1075","pg1030","pg1015"];
		var sk2000 = ["pg0075","pg0030","pg0015"];
		var sk1990 = ["pg9075","pg9030","pg9015"];

		var bes1995 = ["b95c","b95m","b95z","b95d"];
		var bes1998 = ["b98c","b98m","b98z","b98d"];
		var bes2001 = ["b01c","b01m","b01z","b01d"];
		var bes2005 = ["b05c","b05m","b05z","b05d"];
		var bes2008 = ["b08c","b08m","b08z","b08d"];

		var ast1995 = ["a95c","a95m","a95z","a95d"];
		var ast1998 = ["a98c","a98m","a98z","a98d"];
		var ast2001 = ["a01c","a01m","a01z","a01d"];
		var ast2005 = ["a05c","a05m","a05z","a05d"];
		var ast2008 = ["a08c","a08m","a08z","a08d"];

		var besg1995 = ["bg95"];
		var besg1998 = ["bg98"];
		var besg2001 = ["bg01"];
		var besg2005 = ["bg05"];
		var besg2008 = ["bg08"];
		
		var astg1995 = ["ag95"];
		var astg1998 = ["ag98"];
		var astg2001 = ["ag01"];
		var astg2005 = ["ag05"];
		var astg2008 = ["ag08"];

		var s = sr2010.concat(sr2000).concat(sr1990).concat(sk2010).concat(sr2000).concat(sr1990);
		s = s.concat(sk2010).concat(sk2000).concat(sk1990);
		s = s.concat(ast1995).concat(ast1998).concat(ast2001).concat(ast2005).concat(ast2008);
		s = s.concat(bes1995).concat(bes1998).concat(bes2001).concat(bes2005).concat(bes2008);
		s = s.concat(besg1995).concat(besg1998).concat(besg2001).concat(besg2005).concat(besg2008);
		s = s.concat(astg1995).concat(astg1998).concat(astg2001).concat(astg2005).concat(astg2008);

		var on = [];

		if (karte === 'bev2010') {
			if (typus === 'raster') {
				on = sr2010;
			} else {
				on = sk2010;
			}
		} else if (karte === 'bev2000') {
			if (typus === 'raster') {
				on = sr2000;
			} else {
				on = sk2000;
			}
		} else if (karte === 'bev1990') {
			if (typus === 'raster') {
				on = sr1990;
			} else {
				on = sk1990;
			}
		} else if (karte === 'betr1995') {
			if (typus === 'raster') {
				on = ast1995;
			} else {
				on = astg1995;
			}
		} else if (karte === 'betr1998') {
			if (typus === 'raster') {
				on = ast1998;
			} else {
				on = astg1998;
			}
		} else if (karte === 'betr2001') {
			if (typus === 'raster') {
				on = ast2001;
			} else {
				on = astg2001;
			}
		} else if (karte === 'betr2005') {
			if (typus === 'raster') {
				on = ast2008;
			} else {
				on = astg2008;
			}
		} else if (karte === 'betr2008') {
			if (typus === 'raster') {
				on = ast2008;
			} else {
				on = astg2008;
			}
		} else if (karte === 'besch1995') {
			if (typus === 'raster') {
				on = bes1995;
			} else {
				on = besg1995;
			}
		} else if (karte === 'besch1998') {
			if (typus === 'raster') {
				on = bes1998;
			} else {
				on = besg1998;
			}
		} else if (karte === 'besch2001') {
			if (typus === 'raster') {
				on = bes2001;
			} else {
				on = besg2001;
			}
		} else if (karte === 'besch2005') {
			if (typus === 'raster') {
				on = bes2005;
			} else {
				on = besg2005;
			}
		} else if (karte === 'besch2008') {
			if (typus === 'raster') {
				on = bes2008;
			} else {
				on = besg2008;
			}
		}
		this.onMultipleCheckChange('StaBevZH', 'main', s, on);
	}

});
